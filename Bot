import logging
import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7213101151:AAEyVSf3frBiz2mK4iTCg2TndR2cosh0p8k"
CHANNEL_ID = -1002834472692  # –í–∞—à –∫–∞–Ω–∞–ª

# –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
LINKS = {
    "üí¨ –ß–∞—Ç": "https://t.me/+j5_rzMShre5hMTQy",
    "üì¢ –ö–∞–Ω–∞–ª": "https://t.me/LemexCFG",
    "üìö –ì–∞–π–¥—ã": "https://t.me/+ea_glVhWUaA3Y2Y6"
}

# –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
FOOTER = """
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
{links}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""

async def check_old_messages(app: Application):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        count = 0
        
        async for message in app.bot.get_chat_history(CHANNEL_ID, limit=100):
            try:
                original_text = message.text or message.caption or ""
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if any(link in original_text for link in LINKS.keys()) or not original_text:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Å—ã–ª–∫–∏
                links_text = "\n".join(f"‚Ä¢ <a href='{url}'>{text}</a>" for text, url in LINKS.items())
                footer = FOOTER.format(links=links_text)
                new_text = f"{original_text}\n{footer}"
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.text:
                    await message.edit_text(new_text, parse_mode=ParseMode.HTML)
                elif message.caption:
                    await message.edit_caption(caption=new_text, parse_mode=ParseMode.HTML)
                
                count += 1
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç API
                
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.message_id}: {e}")
        
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def edit_new_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        message = update.effective_message
        original_text = message.text or message.caption or ""
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ —É–∂–µ –µ—Å—Ç—å
        if any(link in original_text for link in LINKS.keys()):
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Å—Å—ã–ª–∫–∏
        links_text = "\n".join(f"‚Ä¢ <a href='{url}'>{text}</a>" for text, url in LINKS.items())
        footer = FOOTER.format(links=links_text)
        new_text = f"{original_text}\n{footer}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.text:
            await message.edit_text(new_text, parse_mode=ParseMode.HTML)
        elif message.caption:
            await message.edit_caption(caption=new_text, parse_mode=ParseMode.HTML)
            
        logger.info(f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message.message_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def post_init(app: Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await check_old_messages(app)

def main():
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.Chat(chat_id=CHANNEL_ID),
        edit_new_message
    ))
    
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        drop_pending_updates=True
    )
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    main()
